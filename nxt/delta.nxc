// vim: set fileencoding=utf-8 expandtab shiftwidth=4 tabstop=4 softtabstop=4:

/*
 * NXT delta robot
 *
 * http://blog.jfedor.org/2012/08/nxt-delta-robot.html
 *
 * This code requires the NBC/NXC enhanced firmware.
 *
 * The kinematics math is taken from here:
 * http://forums.trossenrobotics.com/tutorials/introduction-129/delta-robot-kinematics-3276/
 */

// robot geometry
const float e = 12.0;     // end effector
const float f = 24.24;     // base
const float re = 21.0;
const float rf = 8.0;

// trigonometric constants
const float sqrt3 = sqrt(3.0);
const float pi = 3.141592653;    // PI
const float sin120 = sqrt3/2.0;   
const float cos120 = -0.5;        
const float tan60 = sqrt3;
const float sin30 = 0.5;
const float tan30 = 1.0/sqrt3;

// forward kinematics: (theta1, theta2, theta3) -> (x0, y0, z0)
// returned status: 0=OK, -1=non-existing position
int delta_calcForward(float theta1, float theta2, float theta3, float &x0, float &y0, float &z0) {
    float t = (f-e)*tan30/2;
    float dtr = pi/180.0;

    theta1 *= dtr;
    theta2 *= dtr;
    theta3 *= dtr;

    float y1 = -(t + rf*cos(theta1));
    float z1 = -rf*sin(theta1);

    float y2 = (t + rf*cos(theta2))*sin30;
    float x2 = y2*tan60;
    float z2 = -rf*sin(theta2);

    float y3 = (t + rf*cos(theta3))*sin30;
    float x3 = -y3*tan60;
    float z3 = -rf*sin(theta3);

    float dnm = (y2-y1)*x3-(y3-y1)*x2;

    float w1 = y1*y1 + z1*z1;
    float w2 = x2*x2 + y2*y2 + z2*z2;
    float w3 = x3*x3 + y3*y3 + z3*z3;
    
    // x = (a1*z + b1)/dnm
    float a1 = (z2-z1)*(y3-y1)-(z3-z1)*(y2-y1);
    float b1 = -((w2-w1)*(y3-y1)-(w3-w1)*(y2-y1))/2.0;

    // y = (a2*z + b2)/dnm;
    float a2 = -(z2-z1)*x3+(z3-z1)*x2;
    float b2 = ((w2-w1)*x3 - (w3-w1)*x2)/2.0;

    // a*z^2 + b*z + c = 0
    float a = a1*a1 + a2*a2 + dnm*dnm;
    float b = 2*(a1*b1 + a2*(b2-y1*dnm) - z1*dnm*dnm);
    float c = (b2-y1*dnm)*(b2-y1*dnm) + b1*b1 + dnm*dnm*(z1*z1 - re*re);
 
    // discriminant
    float d = b*b - 4.0*a*c;
    if (d < 0) return -1; // non-existing point

    z0 = -0.5*(b+sqrt(d))/a;
    x0 = (a1*z0 + b1)/dnm;
    y0 = (a2*z0 + b2)/dnm;
    return 0;
}

int delta_calcAngleYZ(float x0, float y0, float z0, float &theta) {
    float y1 = -0.5 * 0.57735 * f; // f/2 * tg 30
    //float y1 = yy1;
    y0 -= 0.5 * 0.57735    * e;    // shift center to edge
    // z = a + b*y
    float a = (x0*x0 + y0*y0 + z0*z0 +rf*rf - re*re - y1*y1)/(2*z0);
    float b = (y1-y0)/z0;
    // discriminant
    float d = -(a+b*y1)*(a+b*y1)+rf*(b*b*rf+rf); 
    if (d < 0) return -1; // non-existing point
    float yj = (y1 - a*b - sqrt(d))/(b*b + 1); // choosing outer point
    float zj = a + b*yj;
    theta = 180.0*atan(-zj/(y1 - yj))/pi + ((yj>y1)?180.0:0.0);
    if ((theta < 0) || (theta > 180))
        return -1;
    return 0;
}

// inverse kinematics: (x0, y0, z0) -> (theta1, theta2, theta3)
// returned status: 0=OK, -1=non-existing position
int delta_calcInverse(float x0, float y0, float z0, float &theta1, float &theta2, float &theta3) {
    theta1 = theta2 = theta3 = 0;
    int status = delta_calcAngleYZ(x0, y0, z0, theta1);
    if (status == 0) status = delta_calcAngleYZ(x0*cos120 + y0*sin120, y0*cos120-x0*sin120, z0, theta2);  // rotate coords to +120 deg
    if (status == 0) status = delta_calcAngleYZ(x0*cos120 - y0*sin120, y0*cos120+x0*sin120, z0, theta3);  // rotate coords to -120 deg
    return status;
}

task main() {
    float t1;
    float t2;
    float t3;

    int errors = 0;

    int i, status;

    SetMotorRegulationTime(10); // the default is 100 ms, which doesn't work very well
    PosRegEnable(OUT_A);
    PosRegEnable(OUT_B);
    PosRegEnable(OUT_C);

    // move in circles
    for (i = 0; i < 20*360; i+=30) {
            // display the difference between target and actual motor positions
            TextOut(0, LCD_LINE5, NumToStr(-t1-MotorRotationCount(OUT_A)));
            TextOut(0, LCD_LINE6, NumToStr(-t2-MotorRotationCount(OUT_B)));
            TextOut(0, LCD_LINE7, NumToStr(-t3-MotorRotationCount(OUT_C)));
            status = delta_calcInverse(sind(i)*8, cosd(i)*8, -24, t1, t2, t3);
            if (status == 0) {
                TextOut(0, LCD_LINE1, NumToStr(t1));
                TextOut(0, LCD_LINE2, NumToStr(t2));
                TextOut(0, LCD_LINE3, NumToStr(t3));
                PosRegSetAngle(OUT_A, -t1);
                PosRegSetAngle(OUT_B, -t2);
                PosRegSetAngle(OUT_C, -t3);
                Wait(100);
            } else {
                errors++;
                TextOut(0, LCD_LINE4, NumToStr(errors));
                PlayTone(440, 250);
            }
    }

    // return to initial position
    PosRegSetAngle(OUT_A, 0);
    PosRegSetAngle(OUT_B, 0);
    PosRegSetAngle(OUT_C, 0);
    Wait(500);
}
